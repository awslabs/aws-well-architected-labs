AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves AWS Compute Optimizer information from across an organization
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  ManagementRoleName:
    Type: String
    Description: The name of the IAM role that will be deployed in the management account which can retrieve AWS Organization data. KEEP THE SAME AS WHAT IS DEPLOYED INTO MANAGEMENT ACCOUNT
  ManagementAccountID:
    Type: String
    AllowedPattern: ([a-z0-9\-, ]*?$)
    Description: "(Ex: 123456789,098654321,789054312) List of Payer IDs you wish to collect data for. Can just be one Accounts"
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: compute-optimizer
  Schedule:
    Type: String
    Description: Cron job to trigger the lambda using cloudwatch event
    Default: "rate(14 days)"
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  GlueRoleARN:
    Type: String
  S3CrawlerQue:
    Type: String
    Description: SQS that will be used to trigger the crawler lambda to pull data in (Not used)
  RolePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  BucketPrefix:
    Type: String
    Default: 'costoptimization'
    Description: This prefix will be used for buckets creation
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9\-])$)
  DeployRegions:
    Type: String
    Description: "A comma separated list of AWS regions where compute-optimizer needs to collect info. Example: us-east-1,eu-west-1"
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  IncludeMemberAccounts:
    Type: String
    AllowedValues: ["yes", "no"]
    Default: 'yes'
    Description: Include Member Accounts or not. Set to 'yes' when working with payer 
Outputs:
  LambdaARN:
    Description: Lambda Arn
    Value:
       Fn::GetAtt:
        - LambdaTriggerExport
        - Arn
Resources:
  StackSetAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:  StackSetAdminRole
      Description: "This role is used by cloudformation to create StackSets in different regions. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: StackSetAdminRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub "arn:aws:iam::*:role/${RolePrefix}StackSetExecutionRole"
  StackSetExecutionRole:  #see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RolePrefix}StackSetExecutionRole"
      Description: "This role is used by cloudformation to create StackSets in different regions. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt StackSetAdminRole.Arn
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StackSetParameterExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                Resource: !Sub 'arn:aws:cloudformation:*:${AWS::AccountId}:stack/StackSet-${BucketPrefix}${AWS::AccountId}-comp-optim-buckets*'
        - PolicyName: ResourcesPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:ListBucket
                  - s3:Put*
                  - s3:Set*
                  - s3:Get*
                  - s3:Replicate*
                  - s3:DeleteBucketPolicy
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketPrefix}${AWS::AccountId}-*'
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:PassRole
                  - iam:DeleteRolePolicy
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/StackSet-${BucketPrefix}*' # Shorter version of StackSetName
  ReplicaitonBucketsStackSet:
    Type: AWS::CloudFormation::StackSet
    DependsOn:
      - StackSetExecutionRole
    Properties:
      Description: !Sub "S3 buckets in multiple regions replicating data to s3://${DestinationBucket}."
      PermissionModel: SELF_MANAGED
      ManagedExecution:
        Active: true
      Parameters:
        - ParameterKey: Name
          ParameterValue: !Sub "${BucketPrefix}${AWS::AccountId}"
        - ParameterKey: DestinationBucket
          ParameterValue: !Ref DestinationBucket
        - ParameterKey: ManagementAccountID
          ParameterValue: !Ref ManagementAccountID
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref "AWS::AccountId"
          Regions: !Split [ ',', !Ref DeployRegions]
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      StackSetName: !Sub "${BucketPrefix}${AWS::AccountId}-comp-optim-buckets"
      AdministrationRoleARN: !GetAtt [StackSetAdminRole, Arn]
      ExecutionRoleName: !Sub "${RolePrefix}StackSetExecutionRole"
      TemplateBody: |
        AWSTemplateFormatVersion: '2010-09-09'
        Description: This template creates a bucket in a given region and configure a replication to the main bucket
        Parameters:
          Name:
            Type: String
            Description: Prefix of regional bucket name
          ManagementAccountID:
            Type: String
            Description: Comma separated IDs of Management Accounts that will send data to the bucket
          DestinationBucket:
            Type: String
            Description: A name of the main bucket where all data will be stored
        Resources:
          BucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
              Bucket: !Ref S3Bucket
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                - Effect: Allow
                  Principal:
                    Service: compute-optimizer.amazonaws.com
                  Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicyStatus
                  Resource: !Sub "arn:aws:s3:::${Name}-${AWS::Region}"
                - Effect: Allow
                  Principal:
                    Service: compute-optimizer.amazonaws.com
                  Action: s3:PutObject
                  Condition:
                    StringEquals:
                          s3:x-amz-acl:  bucket-owner-full-control
                          aws:SourceAccount: !Split [',', !Ref ManagementAccountID]
                  Resource: !Sub "arn:aws:s3:::${Name}-${AWS::Region}/*"
                - Effect: Deny
                  Principal: "*"
                  Action: s3:*
                  Condition:
                    Bool:
                      aws:SecureTransport: 'false'
                  Resource:
                    - !Sub "arn:aws:s3:::${Name}-${AWS::Region}"
                    - !Sub "arn:aws:s3:::${Name}-${AWS::Region}/*"
          ReplicaRole:
            Type: AWS::IAM::Role
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                - Action: ['sts:AssumeRole']
                  Effect: Allow
                  Principal:
                    Service: [s3.amazonaws.com]
          ReplicaPolicy:
            Type: AWS::IAM::Policy
            Properties:
              PolicyDocument:
                Statement:
                - Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                  Resource: !Sub arn:aws:s3:::${Name}-${AWS::Region}
                  Effect: 'Allow'
                - Action:
                  - s3:GetObjectVersionForReplication
                  - s3:GetObjectVersionAcl
                  Resource: !Sub arn:aws:s3:::${Name}-${AWS::Region}/*
                  Effect: 'Allow'
                - Action:
                  - s3:ReplicateObject
                  - s3:ReplicateTags
                  - s3:GetObjectVersionTagging
                  Effect: 'Allow'
                  Resource: !Sub arn:aws:s3:::${DestinationBucket}/*
              PolicyName: ReplicaPolicy
              Roles: [!Ref 'ReplicaRole']
          S3Bucket:
            Type: AWS::S3::Bucket
            DeletionPolicy: Delete
            Properties:
              BucketName: !Sub ${Name}-${AWS::Region}
              BucketEncryption:
                ServerSideEncryptionConfiguration:
                  - ServerSideEncryptionByDefault:
                      SSEAlgorithm: AES256
              ReplicationConfiguration:
                Role: !GetAtt [ReplicaRole, Arn]
                Rules:
                  - Id: Replication to the main bucket
                    Priority: 2
                    Filter:
                      Prefix: ''
                    Destination:
                      Bucket: !Sub arn:aws:s3:::${DestinationBucket}
                      StorageClass: STANDARD
                    DeleteMarkerReplication:
                      Status: Disabled
                    Status: Enabled
              VersioningConfiguration:
                Status: Enabled
              LifecycleConfiguration:
                Rules:
                  - Id: Cleanup
                    Prefix: ''
                    Status: Enabled
                    ExpirationInDays: 1
                  - Id: NoncurrentCleanup
                    Prefix: ''
                    Status: Enabled
                    NoncurrentVersionExpiration:
                      NoncurrentDays: 1
                      NewerNoncurrentVersions: 1
              PublicAccessBlockConfiguration:
                BlockPublicAcls : true
                BlockPublicPolicy : true
                IgnorePublicAcls : true
                RestrictPublicBuckets : true
  LambdaTriggerExportRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RolePrefix}Lambda-Role-${CFDataName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyName: !Sub "Assume-Management-${CFDataName}-Account-Role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:aws:iam::*:role/${ManagementRoleName}" # Need to assume a Read role in all Management Accounts
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  LambdaTriggerExport:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${RolePrefix}${CFDataName}-Trigger-Export"
      Description: "LambdaFunction to start ComputeOptimizer export jobs"
      Handler: index.lambda_handler
      Runtime: python3.9
      MemorySize: 2688
      Timeout: 300
      Role:
        Fn::GetAtt:
          - LambdaTriggerExportRole
          - Arn
      Environment:
        Variables:
          REGIONS: !Ref DeployRegions
          BUCKET_PREFIX: !Sub "${BucketPrefix}${AWS::AccountId}"
          INCLUDE_MEMBER_ACCOUNTS: !Ref IncludeMemberAccounts
          ROLE_NAME: !Ref ManagementRoleName
          MANAGEMENT_ACCOUNT_IDS: !Ref ManagementAccountID
      Code:
        ZipFile: |
          import os
          import boto3
          from datetime import date

          BUCKET_PREFIX = os.environ["BUCKET_PREFIX"]
          INCLUDE_MEMBER_ACCOUNTS = os.environ.get("INCLUDE_MEMBER_ACCOUNTS", 'yes').lower() == 'yes'
          REGIONS = os.environ["REGIONS"]
          ROLE_NAME = os.environ['ROLE_NAME']
          ARCH = os.environ.get('ARCH', 'AWS_ARM64,CURRENT').split(',')

          def lambda_handler(event, context):
              today = date.today()
              year = today.year
              month = today.month

              MANAGEMENT_ACCOUNT_IDS = os.environ['MANAGEMENT_ACCOUNT_IDS']
              for payer_id in [r.strip() for r in MANAGEMENT_ACCOUNT_IDS.split(',')]:
                  try:
                      ROLE_ARN = f"arn:aws:iam::{payer_id}:role/{ROLE_NAME}"
                      sts_connection = boto3.client('sts')
                      acct_b = sts_connection.assume_role(RoleArn=ROLE_ARN, RoleSessionName="cross_acct_lambda")

                      account_b_creds = {
                        "aws_access_key_id":     acct_b['Credentials']['AccessKeyId'],
                        "aws_secret_access_key": acct_b['Credentials']['SecretAccessKey'],
                        "aws_session_token":     acct_b['Credentials']['SessionToken'],
                      }

                      acc = boto3.client("sts", **account_b_creds).get_caller_identity()["Account"]

                      result_messages = []
                      error_messages = []
                      for region in [r.strip() for r in REGIONS.split(',')]:
                          # create service client using the assumed role credentials
                          co = boto3.client("compute-optimizer", region_name=region, **account_b_creds)
                          pars = {'recommendationPreferences': {'cpuVendorArchitectures': ARCH}}
                          export_funcs = {
                              'ec2_instance': (co.export_ec2_instance_recommendations, pars),
                              'auto_scale':   (co.export_auto_scaling_group_recommendations, pars),
                              'lambda':       (co.export_lambda_function_recommendations, {}),
                              'ebs_volume':   (co.export_ebs_volume_recommendations, {}),
                              'ecs_service':  (co.export_ecs_service_recommendations, {}),
                          }
                          bkt = BUCKET_PREFIX + '-' + region
                          print(f"INFO: bucket={bkt}")
                          for name, (func, pars) in export_funcs.items():
                              try:
                                  res = func(
                                      includeMemberAccounts=INCLUDE_MEMBER_ACCOUNTS,
                                      s3DestinationConfig={'bucket': bkt, 'keyPrefix': f'compute_optimizer/compute_optimizer_{name}/payer_id={payer_id}/year={year}/month={month}'},
                                      **pars
                                  )
                                  result_messages.append(f"{region} {name} export queued. JobId: {res['jobId']}")
                              except co.exceptions.LimitExceededException:
                                  result_messages.append(f"{region} {name} export was already queued. Skiping.")
                              except Exception as exc:
                                  error_messages.append(f"ERROR: {region} {name} - {exc}")
                      if result_messages:
                          print("Success:\n"+"\n".join(result_messages))
                      if error_messages:
                          raise Exception(f"There were {len(error_messages)} errors, out of {len(result_messages) + len(error_messages)} exports: \n" + "\n".join(error_messages))
                  except Exception as e:
                      print(payer_id, type(e), e)
                      continue
  CloudWatchTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Scheduler-For-${RolePrefix}${CFDataName}"
      Name: !Sub "Scheduler-For-${RolePrefix}${CFDataName}"
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaTriggerExport
              - Arn
          Id: TriggerForGetAccounts
  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaTriggerExport.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt CloudWatchTrigger.Arn
  CustomRessourceFunctionFinalize:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt 'FinalizeLambdaExecutionRole.Arn'
      FunctionName: !Sub "${RolePrefix}Compute-Optimizer-FinalizeSetup-DoNotRun"
      Description: "Lambda to Finalize Setup (call trigger lambda) or Start teardown (Cleanup buckets)"
      Runtime: python3.8
      Architectures: [ arm64 ]
      Code:
        ZipFile: |
          import os
          import uuid
          import json
          import boto3
          import botocore
          import urllib3

          REGIONS = os.environ['REGIONS'].replace(' ', '').split(',')
          BUCKET_PREFIX = os.environ['BUCKET_PREFIX']
          LAMBDA_ARN = os.environ['TRIGGER_LAMBDA']

          def lambda_handler(event, context):
              print(event)
              type_ = event.get('RequestType', 'Undef')
              if type_ == 'Create': res = on_create()
              elif type_ == 'Delete': res = on_delete()
              else: res = (True, f"Not supported operation: {type_}")
              response_data = {'Reason': res[1], 'uuid': str(uuid.uuid1()) }

              url = event.get('ResponseURL')
              body = {}
              body['Status'] = 'SUCCESS' if res[0] else 'FAILED'
              body['Reason'] = str(res[1]) + '\nSee the details in CloudWatch Log Stream: ' + context.log_stream_name
              body['PhysicalResourceId'] = context.log_stream_name
              body['StackId'] = event.get('StackId')
              body['RequestId'] = event.get('RequestId')
              body['LogicalResourceId'] = event.get('LogicalResourceId')
              body['NoEcho'] = False
              body['Data'] = response_data
              print(body)
              if not url: return
              json_body=json.dumps(body)
              try:
                  http = urllib3.PoolManager()
                  response = http.request('PUT', url, body=json_body, headers={'content-type' : '', 'content-length' : str(len(json_body))}, retries=False)
                  print(f"Status code: {response}" )
              except Exception as exc:
                  print("send(..) failed executing requests.put(..): " + str(exc))

          def on_create():
              try:
                  name = LAMBDA_ARN.split(':')[-1]
                  boto3.client('lambda').invoke(FunctionName=name, InvocationType="RequestResponse", Payload='{}')
                  return (True, f'INFO: Invoked {name}')
              except Exception as exc:
                  return (True, f'ERROR: error invoking lambda {exc}')

          def on_delete():
              # Delete all buckets (CF cannot delete if they are non-empty)
              s3 = boto3.resource('s3')
              log = []
              for region in REGIONS:
                  name = BUCKET_PREFIX + "-" + region
                  try:
                      bucket = s3.Bucket(name)
                      bucket.object_versions.delete()
                      log.append(f'INFO:  {name} is empty now')
                      bucket.delete()
                      log.append(f'INFO:  {name} deleted')
                  except botocore.exceptions.ClientError as exc:
                      status = exc.response["ResponseMetadata"]["HTTPStatusCode"]
                      errcode = exc.response["Error"]["Code"]
                      if status == 404:
                          log.append(f'INFO:  {name} - {errcode}')
                      else:
                          log.append(f'ERROR: {name} - {errcode}')
                  except Exception as exc:
                      log.append(f'ERROR: {name} Error: {exc}')
              print('\n'.join(log))
              return (True, '\n'.join(log))
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Environment:
        Variables:
          REGIONS: !Ref DeployRegions
          BUCKET_PREFIX: !Sub "${BucketPrefix}${AWS::AccountId}"
          TRIGGER_LAMBDA:  !GetAtt LambdaTriggerExport.Arn
  FinalizeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt LambdaTriggerExport.Arn
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: !Sub 'arn:aws:s3:::${BucketPrefix}${AWS::AccountId}-*/*'
              - Effect: Allow
                Action:
                  - s3:ListBucketVersions
                  - s3:DeleteBucket
                Resource: !Sub 'arn:aws:s3:::${BucketPrefix}${AWS::AccountId}-*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  FinalizeSetup:
    DependsOn:
      - LambdaTriggerExport
      - ReplicaitonBucketsStackSet
      - FinalizeLambdaExecutionRole
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomRessourceFunctionFinalize.Arn
  LambdaAnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName
